{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","Movie_MoviePoster","map","index","Movie_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","then","response","json","data","sent","setState","stop","fetch","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAoCMA,SAAa,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MACjB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,KAQjCK,EAAc,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,IAC1B,OACIP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQH,UAAU,gBAAgBI,IAAKA,EAAKE,MAAOF,KAStDG,EApDD,SAAAC,GAAuC,IAArCF,EAAqCE,EAArCF,MAAOH,EAA8BK,EAA9BL,OAAQM,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,SACnC,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACY,EAAD,CAAaR,OAAQA,EAAQC,IAAKE,KAEtCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVS,EAAOG,IAAI,SAAChB,EAAOiB,GAAR,OAAkBhB,EAAAC,EAAAC,cAACe,EAAD,CAAYlB,MAAOA,EAAOmB,IAAKF,OAEjEhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACTH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACImB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCyBjBC,6MA1CXC,MAAQ,KAMRC,cAAgB,WAQZ,OAPeC,EAAKF,MAAMG,OAAOd,IAAI,SAAAe,GACjC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOtB,MAAOqB,EAAME,cACpB1B,OAAQwB,EAAMG,mBACdrB,OAAQkB,EAAMlB,OACdC,SAAUiB,EAAMjB,SAChBK,IAAKY,EAAMI,UAK1BC,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYb,EAAKc,WACrBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKjB,SAHnB,OACHA,EADGU,EAAAQ,KAKTnB,EAAKoB,SAAS,CACVnB,WANK,wBAAAU,EAAAU,SAAAb,QAUbM,SAAW,WACP,OAAOQ,MAAM,iEACRP,KAAK,SAAAC,GAAQ,OAAIA,IACjBO,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAKF,yFA3B/BG,KAAKpB,8CA8BA,IACGN,EAAW0B,KAAK7B,MAAhBG,OACR,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,UAAW0B,EAAS,MAAQ,gBAC5BA,EAAS0B,KAAK5B,gBAAkB,kBAtC/B6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.dd05e90d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nconst Movie = ({title, poster, genres, synopsis}) => {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='2'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n};\r\n\r\nconst MovieGenre = ({genre}) => {\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    )\r\n};\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n\r\n};\r\n\r\nconst MoviePoster = ({poster, alt}) => {\r\n    return (\r\n        <img src={poster} className=\"Movie__Poster\" alt={alt} title={alt}/>\r\n    );\r\n};\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n\r\n};\r\n\r\nexport default Movie;\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie'\r\n\r\nclass App extends Component {\r\n    state = {};\r\n\r\n    componentDidMount() {\r\n        this._getMovies();\r\n    }\r\n\r\n    _renderMovies = () => {\r\n        const movies = this.state.movies.map(movie => {\r\n            return <Movie title={movie.title_english}\r\n                   poster={movie.medium_cover_image}\r\n                   genres={movie.genres}\r\n                   synopsis={movie.synopsis}\r\n                   key={movie.id}/>\r\n        });\r\n        return movies;\r\n    };\r\n\r\n    _getMovies = async () => {\r\n        const movies = await this._callApi()\r\n            .then(response => response.json())\r\n            .then(json => json.data.movies);\r\n\r\n        this.setState({\r\n            movies\r\n        })\r\n    }\r\n\r\n    _callApi = () => {\r\n        return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\r\n            .then(response => response)\r\n            .catch(err => console.log((err)));\r\n    }\r\n\r\n    render() {\r\n        const { movies } = this.state;\r\n        return (\r\n            <div className={movies ? \"App\" : \"App--loading\"}>\r\n                {movies ? this._renderMovies() : 'Loading'}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.register();\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}